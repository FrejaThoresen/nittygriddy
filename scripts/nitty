from datetime import datetime
from glob import glob
from pprint import pprint
import subprocess
import argparse
import os
import shutil
import sys

from nittygriddy import utils, settings


class formatter_class(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawTextHelpFormatter):
    pass

parser = argparse.ArgumentParser(formatter_class=formatter_class)
parser.add_argument(
    '-v', '--verbose', action='store_true', default=False)
subparsers = parser.add_subparsers()


def datasets(args):
    if args.list:
        pprint(utils.get_datasets())


parser_datasets = subparsers.add_parser('datasets')
parser_datasets.add_argument(
    '-l', '--list',
    help="list all predifined datasets", default=False, action='store_true')
parser_datasets.set_defaults(op=datasets)


def run(args):
    if not os.path.isfile(os.path.join(os.path.abspath(os.path.curdir), "nittygriddy.json"))\
       or not os.path.isfile(os.path.join(os.path.abspath(os.path.curdir), "ConfigureWagon.C")):
        print "Can only run from a nittygriddy project folder"
        return
    try:
        output_dir = os.path.join(os.path.abspath(os.path.curdir), datetime.now().strftime("%Y%m%d_%H%M"))
        os.mkdir(output_dir)
    except OSError:
        print "Cannot create output folder {}".format(output_dir)
        return
    try:
        os.symlink(output_dir, "latest")
    except OSError:
        os.remove("latest")
        os.symlink(output_dir, "latest")
    utils.copy_template_files_to(output_dir)
    shutil.copy(os.path.join(os.path.dirname(output_dir), "ConfigureWagon.C"), output_dir)
    # generate input file
    ds = utils.get_datasets()[args.dataset]
    # create the input file (TODO: if not grid mode)
    with open(os.path.join(output_dir, "input_files.dat"), 'a') as input_files:
        search_string = os.path.expanduser(os.path.join(settings["local_data_dir"],
                                                        ds["datadir"].lstrip("/"),
                                                        "*",
                                                        ds["data_pattern"]))
        input_files.write('\n'.join(glob(search_string)) + '\n')

    # create GetSetting.C in output dir (from template)
    with open(os.path.join(output_dir, "GetSetting.C"), "w") as get_setting_c:
        as_string = utils.get_template_GetSetting().\
            format(overwrite_oadb_period=ds.get("overwrite_oadb_period", ""),
                   workdir=os.path.split(output_dir)[1],
                   datadir=ds['datadir'],
                   data_pattern=ds['data_pattern'],
                   run_number_prefix=ds['run_number_prefix'],
                   run_list=ds['run_list'],
                   is_mc=ds["is_mc"],
                   datatype=ds["datatype"],
                   runmode=args.runmode)
        get_setting_c.write(as_string)
    # start the analysis
    os.chdir(output_dir)
    cmd = ['root', '-l', '-q', 'run.C']
    p = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    for line in iter(p.stdout.readline, b''):
        print(">>> " + line.rstrip())

description_run = """Start analysis on target platform. Must be executed from a
nittygriddy project folder (ie. next to a nittygriddy.json file)"""
parser_run = subparsers.add_parser('run', description=description_run)
parser_run.add_argument('runmode', choices=('local', 'lite', 'grid'))
parser_run.add_argument(
    'dataset', type=str,
    help="Use this dataset")
parser_run.set_defaults(op=run)


args = parser.parse_args()
try:
    args.op(args)
except KeyboardInterrupt:
    sys.exit(1)
except Exception as e:
    sys.exit("{0}: {1}".format(e.__class__.__name__, e))
